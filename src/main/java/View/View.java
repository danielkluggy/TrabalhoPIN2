package View;

import Controller.ControllerSelect;
import Controller.TipoConfirma;
import Controller.TipoViagem;
import DAO.UsuarioDAO;
import DAO.MotoristaDAO;
import DAO.AdministradorDAO;
import Model.ModelAdministrador;
import Model.ModelMotorista;
import Model.ModelUsuario;
import Model.ModelOnibus;
import Model.ModelPessoa;
import Model.ModelPonto;
import Model.ModelRota;
import Model.ModelViagem;
import Model.ModelViagemPassageiroTipo;
import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author dklug
 */
public class View extends javax.swing.JFrame {

    UsuarioDAO usuarioDAO = new UsuarioDAO();
    MotoristaDAO motoristaDAO = new MotoristaDAO();
    AdministradorDAO administradorDAO = new AdministradorDAO();
    
    private List<ModelPonto>         pontos;
    private List<ModelRota>          rotas;
    private List<ModelOnibus>        onibus;
    private List<ModelViagem>        viagens;
    private Set<ModelPessoa>         pessoas;
    private Map<ModelViagemPassageiroTipo, TipoConfirma>    confirma;

    /**
     * Creates new form View
     */
    public View() {
        this.pontos          = new ArrayList<ModelPonto>();
        this.rotas           = new ArrayList<ModelRota>();
        this.onibus          = new ArrayList<ModelOnibus>();
        this.viagens         = new ArrayList<ModelViagem>();
        this.confirma       = new HashMap<ModelViagemPassageiroTipo, TipoConfirma>();
        mocDados();
        initComponents();
    }

   public boolean salvarUsuario(ModelUsuario usuario) {
        return this.usuarioDAO.salvar(usuario);
    }
    
    public void editarUsuario(ModelUsuario usuario) {
        this.usuarioDAO.atualizar(usuario);
    }
    
    public List<ModelUsuario> getUsuarios() {
        return this.usuarioDAO.getTodos();
    }
    
    public void excluirUsuario(int id) {
        this.usuarioDAO.excluir(id);
    }
    
    public boolean salvarMotorista(ModelMotorista motorista) {
        return this.motoristaDAO.salvar(motorista);
    }
    
    public void editarMotorista(ModelMotorista motorista) {
        this.motoristaDAO.atualizar(motorista);
    }
    
    public List<ModelMotorista> getMotoristas() {
        return this.motoristaDAO.getTodos();
    }
    
    public void excluirMotorista(int id) {
        this.motoristaDAO.excluir(id);
    }
    
    public boolean salvarAdministrador(ModelAdministrador administrador) {
        return this.administradorDAO.salvar(administrador);
    }
    
    public void editarAdministrador(ModelAdministrador administrador) {
        this.administradorDAO.atualizar(administrador);
    }
    
    public List<ModelAdministrador> getAdministradores() {
        return this.administradorDAO.getTodos();
    }
    
    public void excluirAdministrador(int id) {
        this.administradorDAO.excluir(id);
    }

    public List<ModelPonto> getPontos() {
        return pontos;
    }

    public List<ModelRota> getRotas() {
        return rotas;
    }
    
    public List<ModelOnibus> getOnibus(){
        return onibus;
    }
    
    public List<ModelViagem> getViagens() {
        return this.viagens;
    }
    
    public Set<ModelPessoa> getPesoas() {
        List<ModelPessoa> pessoaList = new ArrayList<ModelPessoa>();
        pessoaList.addAll(this.getAdministradores());
        pessoaList.addAll(this.getUsuarios());
        pessoaList.addAll(this.getMotoristas());
        
        this.pessoas = new HashSet<ModelPessoa>();
        for(ModelPessoa pessoa: pessoaList) {
            this.pessoas.add(pessoa);
        }
        return this.pessoas;
    }

    public Map<ModelViagemPassageiroTipo, TipoConfirma> getConfirma() {
        return confirma;
    }
    
    public TipoConfirma getTipoConfirmacao(ModelViagemPassageiroTipo viagem) {
        return this.getConfirma().get(viagem);
    }

    public void setTipoConfirmacao(ModelViagemPassageiroTipo viagem, TipoConfirma confirma) {
        this.getConfirma().put(viagem, confirma);
    }
    
    private void iniciar() {
        ControllerSelect controllerSelect = new ControllerSelect(this);
        controllerSelect.exibir();
        
        dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                View view = new View();
                view.setVisible(true);
                view.iniciar();
            }
        });
    }
    
    private  void mocDados() {       
        ModelOnibus oni1 = new ModelOnibus("Mercedes-Benz", 44);
        ModelOnibus oni3 = new ModelOnibus("Volkswagen", 18);
        ModelOnibus oni4 = new ModelOnibus("Marcopolo -Benz", 20);
        oni4.setEmManutencao(true);
        
        this.getOnibus().add(oni1);
        this.getOnibus().add(oni3);
        this.getOnibus().add(oni4);
        
        ModelPonto p1 = new ModelPonto("Centro");
        boolean teste = p1.setLatitudeLongitude(0000, 453667);
        System.out.println(teste);
        ModelPonto p2 = new ModelPonto("Bairro Canta Galo");
        p2.setLatitudeLongitude(50000 , 43000 );
        ModelPonto p3 = new ModelPonto("Bairro Jardim América");
        p3.setLatitudeLongitude(50000 , 610000  );
        
        this.getPontos().add(p1);
        this.getPontos().add(p2);
        this.getPontos().add(p3);
        
        ModelRota r1 = new ModelRota(1, "Rio do Sul", "Ibirama");
        ModelRota r2 = new ModelRota(1, "Rio do Sul", "Lontras");
        ModelRota r3 = new ModelRota(1, "Taió", "Rio do Sul");
        
        this.getRotas().add(r1);
        this.getRotas().add(r2);
        this.getRotas().add(r3);
        
        r1.addPonto(p1);
        r2.addPonto(p2);
        r3.addPonto(p3);
        
         LocalDate date1 = LocalDate.of(2021, 2, 19);
         
         //ModelUsuario u1 = new ModelUsuario(1, "Cardoso", "Udesc");
         //ModelUsuario u2 = new ModelUsuario(1, "Erudito Chaves", "Udesc");
         //ModelUsuario u3 = new ModelUsuario(1, "Gabrieli", "Udesc");
        
        ModelViagem v1 = new ModelViagem();
        v1.setData(date1);
        v1.addMotorista(this.getMotoristas().get(1));
        v1.addOnibus(oni1);
        v1.addRota(r3);
       v1.addPassageiro(this.getUsuarios().get(0), TipoViagem.IDA);
        v1.addPassageiro(this.getUsuarios().get(1), TipoViagem.IDA_VOLTA);
        this.getViagens().add(v1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
