package View;

import Controller.ControllerPonto;
import Controller.ControllerRota;
import Controller.ControllerSelect;
import Controller.ControllerViagem;
import Model.ModelPessoa;
import Model.ModelViagem;
import Controller.TipoConfirma;
import Controller.TipoViagem;
import Model.Table.TableModelPrincipal;
import java.time.LocalDate;
import java.time.ZoneId;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dklug
 */
public class ViewPrincipal extends javax.swing.JFrame {

    private View view;
    private String user;
    private ModelViagem viagem;
    private TableModelPrincipal tableModelPrincipal = new TableModelPrincipal(viagem);
    
    /**
     * Creates new form UserView
     */
    public ViewPrincipal(View view, String user) {
        this.view = view;
        this.user = user;
        //tbViagem.setModel();
        initComponents();
        SetUserAccess();

    }

    private void SetUserAccess(){
        switch (this.user) {
            case ModelPessoa.ADMIN :
                mnGerenciamento.setVisible(true);
                break;
            case ModelPessoa.DRIVER:
                mnGerenciamento.setVisible(false);
                break;
        }
    }
    
    private LocalDate getData () {
        return
        dateSelect.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }
    
    private void loadTable() {
        DefaultTableModel modelo = new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Passageiro", "Tipo", "Ida", "Volta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        for (int i = 0; i < viagem.getPassageiros().size(); i++) {
            Object linha[] = new Object[] { viagem.getPassageiros().get(i).getNome(),
                                                            viagem.getTipoViagemDescricao(viagem.getTipoViagemPorPessoa(viagem.getPassageiros().get(i))),
                                                            getIda(viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)), i),
                                                            getVolta(viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)), i)};
            modelo.addRow(linha);
        }
        tbViagem.setModel(modelo);
    }
    
    private void limpaTabela() {
        DefaultTableModel modelo = new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Passageiro", "Tipo", "Ida", "Volta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
            //modelo.getDataVector().removeAllElements();
            tbViagem.setModel(modelo);
    }
        
    private String getIda(TipoConfirma confirma, int i) {
        if(viagem.getTipoViagemPorPessoa(viagem.getPassageiros().get(i)) == TipoViagem.VOLTA) {
            return "---";
        } else if (confirma == TipoConfirma.IDA || confirma == TipoConfirma.IDA_VOLTA) {
            return "Confirmado";
        } else
            return "Pendente";
    }
    
    private String getVolta(TipoConfirma confirma, int i) {
        if(viagem.getTipoViagemPorPessoa(viagem.getPassageiros().get(i)) == TipoViagem.IDA) {
            return "---";
        } else if (confirma == TipoConfirma.VOLTA || confirma == TipoConfirma.IDA_VOLTA) {
                return "Confirmado";
        } else
            return "Pendente";
    }
               
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        lbData = new javax.swing.JLabel();
        dateSelect = new org.jdesktop.swingx.JXDatePicker();
        lbViagem = new javax.swing.JLabel();
        cbViagem = new javax.swing.JComboBox<>();
        lbOnibus = new javax.swing.JLabel();
        tfOnibus = new javax.swing.JTextField();
        lbLugares = new javax.swing.JLabel();
        tfLugares = new javax.swing.JTextField();
        lbMotorista = new javax.swing.JLabel();
        tfMotorista = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbViagem = new javax.swing.JTable();
        btConfirmaIda = new javax.swing.JButton();
        btConfirmaVolta = new javax.swing.JButton();
        btVoltar = new javax.swing.JButton();
        mbMenu = new javax.swing.JMenuBar();
        mnGerenciamento = new javax.swing.JMenu();
        miAdministrador = new javax.swing.JMenuItem();
        miMotorista = new javax.swing.JMenuItem();
        miUsuario = new javax.swing.JMenuItem();
        miPontos = new javax.swing.JMenuItem();
        miRotas = new javax.swing.JMenuItem();
        miOnibus = new javax.swing.JMenuItem();
        mnViagem = new javax.swing.JMenu();
        mivisualizarViagem = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbData.setText("Data:");

        dateSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateSelectActionPerformed(evt);
            }
        });

        lbViagem.setText("Viagem:");

        cbViagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViagemActionPerformed(evt);
            }
        });

        lbOnibus.setText("Ã”nibus: ");

        tfOnibus.setEditable(false);

        lbLugares.setText("Lugares:");

        tfLugares.setEditable(false);

        lbMotorista.setText("Motorista:");

        tfMotorista.setEditable(false);

        tbViagem.setModel(tableModelPrincipal);
        jScrollPane1.setViewportView(tbViagem);

        btConfirmaIda.setText("Confirmar Ida");
        btConfirmaIda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmaIdaActionPerformed(evt);
            }
        });

        btConfirmaVolta.setText("Confirmar Volta");
        btConfirmaVolta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmaVoltaActionPerformed(evt);
            }
        });

        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(497, 497, 497)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbViagem)
                    .addComponent(lbOnibus)
                    .addComponent(lbLugares)
                    .addComponent(lbMotorista)
                    .addComponent(lbData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(cbViagem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfOnibus)
                    .addComponent(tfLugares)
                    .addComponent(tfMotorista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(437, Short.MAX_VALUE)
                        .addComponent(btConfirmaIda, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btConfirmaVolta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(386, 386, 386))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbData)
                            .addComponent(dateSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btVoltar)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbViagem)
                    .addComponent(cbViagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbOnibus)
                    .addComponent(tfOnibus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbLugares)
                    .addComponent(tfLugares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMotorista)
                    .addComponent(tfMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btConfirmaIda, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(btConfirmaVolta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(267, Short.MAX_VALUE))
        );

        mnGerenciamento.setText("Gerenciamento");

        miAdministrador.setText("Administrador");
        miAdministrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAdministradorActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miAdministrador);

        miMotorista.setText("Motorista");
        miMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMotoristaActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miMotorista);

        miUsuario.setText("UsuÃ¡rio");
        miUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUsuarioActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miUsuario);

        miPontos.setText("Pontos");
        miPontos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPontosActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miPontos);

        miRotas.setText("Rotas");
        miRotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRotasActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miRotas);

        miOnibus.setText("Ã”nibus");
        miOnibus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOnibusActionPerformed(evt);
            }
        });
        mnGerenciamento.add(miOnibus);

        mbMenu.add(mnGerenciamento);

        mnViagem.setText("Viagem");

        mivisualizarViagem.setText("Visualizar");
        mivisualizarViagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mivisualizarViagemActionPerformed(evt);
            }
        });
        mnViagem.add(mivisualizarViagem);

        mbMenu.add(mnViagem);

        setJMenuBar(mbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miAdministradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAdministradorActionPerformed
        ViewManutencaoAdministrador view = new ViewManutencaoAdministrador(this.view);
        view.setVisible(true);
    }//GEN-LAST:event_miAdministradorActionPerformed

    private void miMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miMotoristaActionPerformed
        ViewManutencaoMotorista view = new ViewManutencaoMotorista(this.view);
        view.setVisible(true);
    }//GEN-LAST:event_miMotoristaActionPerformed

    private void miUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUsuarioActionPerformed
        ViewManutencaoUsuario view = new ViewManutencaoUsuario(this.view);
        view.setVisible(true);
    }//GEN-LAST:event_miUsuarioActionPerformed

    private void miRotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRotasActionPerformed
        ControllerRota rota = new ControllerRota(this.view);
        rota.exibir();
    }//GEN-LAST:event_miRotasActionPerformed

    private void miPontosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPontosActionPerformed
        ControllerPonto controllerPonto = new ControllerPonto(this.view);
        controllerPonto.exibir();
    }//GEN-LAST:event_miPontosActionPerformed

    private void miOnibusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOnibusActionPerformed
        ViewOnibus viewOnibus = new ViewOnibus(this.view);
        viewOnibus.setVisible(true);
    }//GEN-LAST:event_miOnibusActionPerformed

    private void mivisualizarViagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mivisualizarViagemActionPerformed
        ControllerViagem controllerViagem = new ControllerViagem(this.view);
        controllerViagem.exibir();
    }//GEN-LAST:event_mivisualizarViagemActionPerformed

    private void cbViagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViagemActionPerformed
        if (cbViagem.getSelectedItem() == null) {
            tfOnibus.setText("");
            tfLugares.setText("");
            tfMotorista.setText("");
            tableModelPrincipal = new TableModelPrincipal (cbViagem.getItemAt(cbViagem.getSelectedIndex()));
            tbViagem.setModel(tableModelPrincipal);
        } else {
            tfOnibus.setText(cbViagem.getItemAt(cbViagem.getSelectedIndex()).getOnibus().getMarca());
            tfLugares.setText(String.valueOf(cbViagem.getItemAt(cbViagem.getSelectedIndex()).getOnibus().getAssentos()));
            tfMotorista.setText(cbViagem.getItemAt(cbViagem.getSelectedIndex()).getMotorista().getNome());
            this.viagem = cbViagem.getItemAt(cbViagem.getSelectedIndex());
            tableModelPrincipal = new TableModelPrincipal (cbViagem.getItemAt(cbViagem.getSelectedIndex()));
            tbViagem.setModel(tableModelPrincipal);
        }
    }//GEN-LAST:event_cbViagemActionPerformed

    private void dateSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateSelectActionPerformed
        cbViagem.removeAllItems();
        for (ModelViagem viagem : this.view.getViagens()) {
            if(viagem.getData().equals(getData())) {
                cbViagem.addItem(viagem);
            }
        }
    }//GEN-LAST:event_dateSelectActionPerformed

    private void btConfirmaIdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmaIdaActionPerformed
        int i = tbViagem.getSelectedRow();
        if (i >= 0 && i < viagem.getPassageiros().size()) {
            if(viagem.getTipoViagemPorPessoa(viagem.getPassageiros().get(i)) == TipoViagem.VOLTA) {
                this.loadTable();
            } else if(viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)) == TipoConfirma.VOLTA) {
                viagem.atualizaTipoConfirma(viagem.getPassageiros().get(i), TipoConfirma.IDA_VOLTA);
            } else if (viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)) == TipoConfirma.PENDENTE) {
                viagem.atualizaTipoConfirma(viagem.getPassageiros().get(i), TipoConfirma.IDA);
            }
            this.loadTable();
        }
    }//GEN-LAST:event_btConfirmaIdaActionPerformed

    private void btConfirmaVoltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmaVoltaActionPerformed
        int i = tbViagem.getSelectedRow();
        if (i >= 0 && i < viagem.getPassageiros().size()) {
            if(viagem.getTipoViagemPorPessoa(viagem.getPassageiros().get(i)) == TipoViagem.IDA) {
                this.loadTable();
            } else if (viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)) == TipoConfirma.IDA) {
                viagem.atualizaTipoConfirma(viagem.getPassageiros().get(i), TipoConfirma.IDA_VOLTA);
            } else if (viagem.getTipoConfirmaPorPessoa(viagem.getPassageiros().get(i)) == TipoConfirma.PENDENTE) {
                viagem.atualizaTipoConfirma(viagem.getPassageiros().get(i), TipoConfirma.VOLTA);
            }
        this.loadTable();
        }
    }//GEN-LAST:event_btConfirmaVoltaActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
       ControllerSelect controllerSelect = new ControllerSelect(this.view);
       controllerSelect.exibir();
        this.dispose();
    }//GEN-LAST:event_btVoltarActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfirmaIda;
    private javax.swing.JButton btConfirmaVolta;
    private javax.swing.JButton btVoltar;
    private javax.swing.JComboBox<ModelViagem> cbViagem;
    private org.jdesktop.swingx.JXDatePicker dateSelect;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbLugares;
    private javax.swing.JLabel lbMotorista;
    private javax.swing.JLabel lbOnibus;
    private javax.swing.JLabel lbViagem;
    private javax.swing.JMenuBar mbMenu;
    private javax.swing.JMenuItem miAdministrador;
    private javax.swing.JMenuItem miMotorista;
    private javax.swing.JMenuItem miOnibus;
    private javax.swing.JMenuItem miPontos;
    private javax.swing.JMenuItem miRotas;
    private javax.swing.JMenuItem miUsuario;
    private javax.swing.JMenuItem mivisualizarViagem;
    private javax.swing.JMenu mnGerenciamento;
    private javax.swing.JMenu mnViagem;
    private javax.swing.JTable tbViagem;
    private javax.swing.JTextField tfLugares;
    private javax.swing.JTextField tfMotorista;
    private javax.swing.JTextField tfOnibus;
    // End of variables declaration//GEN-END:variables
}
